basePath: /
definitions:
  controllers.CreateActorResponse:
    properties:
      id:
        type: string
      message:
        type: string
    type: object
  controllers.CreateMovieResponse:
    properties:
      data:
        $ref: '#/definitions/models.Movie'
      message:
        type: string
    type: object
  controllers.CreateUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      message:
        type: string
      role:
        type: string
    type: object
  controllers.DeleteActorResponse:
    properties:
      message:
        type: string
    type: object
  controllers.DeleteMovieResponse:
    properties:
      message:
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.HealthCheckResponse:
    properties:
      author:
        type: string
      current_time:
        type: string
      status:
        type: string
    type: object
  controllers.LoginResponse:
    properties:
      access_token:
        type: string
      email:
        type: string
      id:
        type: integer
      message:
        type: string
      refresh_token:
        type: string
      role:
        type: string
    type: object
  controllers.PatchActorResponse:
    properties:
      message:
        type: string
    type: object
  controllers.PatchMovieResponse:
    properties:
      message:
        type: string
    type: object
  controllers.ReadActorResponse:
    properties:
      data:
        $ref: '#/definitions/models.Actor'
    type: object
  controllers.ReadAllActorResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Actor'
        type: array
      total_pages:
        type: integer
    type: object
  controllers.ReadAllMoviesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
      total_pages:
        type: integer
    type: object
  controllers.ReadMovieResponse:
    properties:
      data:
        $ref: '#/definitions/models.Movie'
    type: object
  controllers.RefreshTokenResponse:
    properties:
      refresh:
        type: string
      token:
        type: string
    type: object
  controllers.SearchMovieResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
    type: object
  controllers.UpdateActorResponse:
    properties:
      actor:
        $ref: '#/definitions/models.Actor'
      message:
        type: string
    type: object
  controllers.UpdateMovieResponse:
    properties:
      data:
        $ref: '#/definitions/models.Movie'
      message:
        type: string
    type: object
  models.Actor:
    properties:
      birth_date:
        type: string
      first_name:
        maxLength: 100
        type: string
      gender:
        type: string
      id:
        type: integer
      last_name:
        maxLength: 100
        type: string
      movies:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
    required:
    - birth_date
    - first_name
    - gender
    - last_name
    type: object
  models.CreateActorModel:
    properties:
      birth_date:
        type: string
      first_name:
        maxLength: 100
        type: string
      gender:
        type: string
      last_name:
        maxLength: 100
        type: string
      movies:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
    required:
    - birth_date
    - first_name
    - gender
    - last_name
    type: object
  models.CreateMovieModel:
    properties:
      actors:
        items:
          $ref: '#/definitions/models.Actor'
        type: array
      description:
        maxLength: 1000
        type: string
      genre:
        type: string
      rating:
        maximum: 10
        minimum: 0
        type: number
      release_year:
        type: integer
      title:
        maxLength: 150
        minLength: 1
        type: string
    required:
    - rating
    - title
    type: object
  models.LoginUserModel:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.Movie:
    properties:
      actors:
        items:
          $ref: '#/definitions/models.Actor'
        type: array
      description:
        maxLength: 1000
        minLength: 1
        type: string
      genre:
        type: string
      id:
        type: integer
      rating:
        maximum: 10
        minimum: 0
        type: number
      release_year:
        type: integer
      title:
        maxLength: 150
        minLength: 1
        type: string
    required:
    - genre
    - rating
    - release_year
    - title
    type: object
  models.RegisterUserModel:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.UpdateActorModel:
    properties:
      birth_date:
        type: string
      first_name:
        maxLength: 100
        type: string
      gender:
        type: string
      id:
        type: integer
      last_name:
        maxLength: 100
        type: string
      movies:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
    required:
    - birth_date
    - first_name
    - gender
    - id
    - last_name
    type: object
  models.UpdateMovieModel:
    properties:
      actors:
        items:
          $ref: '#/definitions/models.Actor'
        type: array
      description:
        maxLength: 1000
        type: string
      genre:
        type: string
      id:
        type: integer
      rating:
        maximum: 10
        minimum: 0
        type: number
      release_year:
        type: integer
      title:
        maxLength: 150
        minLength: 1
        type: string
    required:
    - id
    - rating
    - title
    type: object
host: localhost:8080
info:
  contact:
    email: rtprnshukla@gmail.com
    name: API Support
    url: https://github.com/shuklarituparn
  description: Fimotek Api Docs
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Filmotek API
  version: "1.0"
paths:
  /api/v1/actors/all:
    get:
      operationId: read-all-actors
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items per page
        in: query
        name: page_size
        required: true
        type: integer
      - description: Field to sort by (default birth_date)
        in: query
        name: sort_by
        type: string
      - description: Sort order (ASC or DESC, default DESC)
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of actors
          schema:
            $ref: '#/definitions/controllers.ReadAllActorResponse'
        "400":
          description: Invalid page_size or page
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all actors with pagination
      tags:
      - Actors
  /api/v1/actors/create:
    post:
      consumes:
      - application/json
      operationId: create-actor
      parameters:
      - description: Actor object to be created
        in: body
        name: actor
        required: true
        schema:
          $ref: '#/definitions/models.CreateActorModel'
      produces:
      - application/json
      responses:
        "201":
          description: Actor Added
          schema:
            $ref: '#/definitions/controllers.CreateActorResponse'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new actor
      tags:
      - Actors
  /api/v1/actors/delete:
    delete:
      operationId: delete-actor
      parameters:
      - description: Actor ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Actor deleted successfully
          schema:
            $ref: '#/definitions/controllers.DeleteActorResponse'
        "400":
          description: Actor ID is required
          schema:
            type: string
        "500":
          description: Failed to delete actor or its associations
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete an actor
      tags:
      - Actors
  /api/v1/actors/get:
    get:
      operationId: read-actor-by-id
      parameters:
      - description: Actor ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Actor details
          schema:
            $ref: '#/definitions/controllers.ReadActorResponse'
        "400":
          description: Actor ID is required
          schema:
            type: string
        "404":
          description: Actor not found
          schema:
            type: string
        "500":
          description: Failed to fetch actor
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get actor by ID
      tags:
      - Actors
  /api/v1/actors/patch:
    patch:
      consumes:
      - application/json
      operationId: patch-actor
      parameters:
      - description: Actor ID
        in: query
        name: id
        required: true
        type: string
      - description: Patch data for updating the actor
        in: body
        name: patchData
        required: true
        schema:
          $ref: '#/definitions/models.CreateActorModel'
      produces:
      - application/json
      responses:
        "200":
          description: Actor updated successfully
          schema:
            $ref: '#/definitions/controllers.PatchActorResponse'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to update actor or its associations
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an existing actor partially
      tags:
      - Actors
  /api/v1/actors/update:
    put:
      consumes:
      - application/json
      operationId: update-actor
      parameters:
      - description: Actor object to be updated
        in: body
        name: actor
        required: true
        schema:
          $ref: '#/definitions/models.UpdateActorModel'
      produces:
      - application/json
      responses:
        "200":
          description: Actor Updated successfully
          schema:
            $ref: '#/definitions/controllers.UpdateActorResponse'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to update actor
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an existing actor
      tags:
      - Actors
  /api/v1/movies/all:
    get:
      operationId: read-all-movies
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items per page
        in: query
        name: page_size
        required: true
        type: integer
      - description: Field to sort by (default rating)
        in: query
        name: sort_by
        type: string
      - description: Sort order (ASC or DESC, default DESC)
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of movies
          schema:
            $ref: '#/definitions/controllers.ReadAllMoviesResponse'
        "400":
          description: Invalid page_size or page
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all movies with pagination
      tags:
      - Movies
  /api/v1/movies/create:
    post:
      consumes:
      - application/json
      operationId: create-movie
      parameters:
      - description: Movie object to be created
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.CreateMovieModel'
      produces:
      - application/json
      responses:
        "201":
          description: Movie created successfully
          schema:
            $ref: '#/definitions/controllers.CreateMovieResponse'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new movie
      tags:
      - Movies
  /api/v1/movies/delete:
    delete:
      operationId: delete-movie
      parameters:
      - description: Movie ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movie deleted successfully
          schema:
            $ref: '#/definitions/controllers.DeleteMovieResponse'
        "400":
          description: Movie ID is required
          schema:
            type: string
        "500":
          description: Failed to delete movie or its associations
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a movie
      tags:
      - Movies
  /api/v1/movies/get:
    get:
      operationId: read-movie-by-id
      parameters:
      - description: Movie ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movie details
          schema:
            $ref: '#/definitions/controllers.ReadMovieResponse'
        "400":
          description: Movie ID is required
          schema:
            type: string
        "404":
          description: Movie not found
          schema:
            type: string
        "500":
          description: Failed to fetch movie
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get movie by ID
      tags:
      - Movies
  /api/v1/movies/patch:
    patch:
      consumes:
      - application/json
      operationId: patch-movie
      parameters:
      - description: Movie ID
        in: query
        name: id
        required: true
        type: string
      - description: Patch data for updating the movie
        in: body
        name: patchData
        required: true
        schema:
          $ref: '#/definitions/models.CreateMovieModel'
      produces:
      - application/json
      responses:
        "200":
          description: Movie updated successfully
          schema:
            $ref: '#/definitions/controllers.PatchMovieResponse'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to update movie or its associations
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an existing movie partially
      tags:
      - Movies
  /api/v1/movies/update:
    put:
      consumes:
      - application/json
      operationId: update-movie
      parameters:
      - description: Movie object to be updated
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.UpdateMovieModel'
      produces:
      - application/json
      responses:
        "200":
          description: Movie updated successfully
          schema:
            $ref: '#/definitions/controllers.UpdateMovieResponse'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to update movie
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an existing movie
      tags:
      - Movies
  /api/v1/search:
    get:
      operationId: search-movies
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - description: Field to sort by (default rating)
        in: query
        name: sort_by
        type: string
      - description: Sort order (ASC or DESC, default DESC)
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of matching movies
          schema:
            $ref: '#/definitions/controllers.SearchMovieResponse'
        "400":
          description: Invalid search query
          schema:
            type: string
        "500":
          description: Error encoding response
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Search for movies
      tags:
      - Search Movies
  /api/v1/users/login:
    post:
      consumes:
      - application/json
      description: Log in a user with email and password
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserModel'
      produces:
      - application/json
      responses:
        "200":
          description: Logged In Successfully
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Log in a user
      tags:
      - Authentication
  /api/v1/users/refresh:
    get:
      consumes:
      - application/json
      description: Refresh JWT access and refresh tokens
      produces:
      - application/json
      responses:
        "200":
          description: New access and refresh tokens
          schema:
            $ref: '#/definitions/controllers.RefreshTokenResponse'
        "400":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Refresh JWT tokens
      tags:
      - Authentication
  /api/v1/users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUserModel'
      produces:
      - application/json
      responses:
        "201":
          description: User Created Successfully
          schema:
            $ref: '#/definitions/controllers.CreateUserResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /healthcheck:
    get:
      operationId: health-check
      produces:
      - application/json
      responses:
        "200":
          description: Health check response
          schema:
            $ref: '#/definitions/controllers.HealthCheckResponse'
      summary: Perform health check
      tags:
      - Healthcheck
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
