definitions:
  controllers.CreateActorResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  controllers.CreateMovieResponse:
    properties:
      data:
        $ref: '#/definitions/models.Movie'
      message:
        type: string
    type: object
  controllers.CreateUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      message:
        type: string
      role:
        type: string
    type: object
  controllers.DeleteActorResponse:
    properties:
      message:
        type: string
    type: object
  controllers.DeleteMovieResponse:
    properties:
      message:
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.HealthCheckResponse:
    properties:
      author:
        type: string
      current_time:
        type: string
      status:
        type: string
    type: object
  controllers.LoginResponse:
    properties:
      access_token:
        type: string
      email:
        type: string
      id:
        type: integer
      message:
        type: string
      refresh_token:
        type: string
      role:
        type: string
    type: object
  controllers.PatchActorResponse:
    properties:
      message:
        type: string
    type: object
  controllers.PatchMovieResponse:
    properties:
      message:
        type: string
    type: object
  controllers.ReadActorResponse:
    properties:
      data:
        $ref: '#/definitions/models.Actor'
    type: object
  controllers.ReadAllActorResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Actor'
        type: array
      total_pages:
        type: integer
    type: object
  controllers.ReadAllMoviesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
      total_pages:
        type: integer
    type: object
  controllers.ReadMovieResponse:
    properties:
      data:
        $ref: '#/definitions/models.Movie'
    type: object
  controllers.RefreshTokenResponse:
    properties:
      refresh:
        type: string
      token:
        type: string
    type: object
  controllers.SearchMovieResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
    type: object
  controllers.UpdateActorResponse:
    properties:
      actor:
        $ref: '#/definitions/models.Actor'
      message:
        type: string
    type: object
  controllers.UpdateMovieResponse:
    properties:
      data:
        $ref: '#/definitions/models.Movie'
      message:
        type: string
    type: object
  models.Actor:
    properties:
      birth_date:
        type: string
      first_name:
        maxLength: 100
        type: string
      gender:
        type: string
      id:
        type: integer
      last_name:
        maxLength: 100
        type: string
      movies:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
    required:
    - birth_date
    - first_name
    - gender
    - last_name
    type: object
  models.CreateActorModel:
    properties:
      birth_date:
        type: string
      first_name:
        maxLength: 100
        type: string
      gender:
        type: string
      last_name:
        maxLength: 100
        type: string
      movies:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
    required:
    - birth_date
    - first_name
    - gender
    - last_name
    type: object
  models.CreateMovieModel:
    properties:
      actors:
        items:
          $ref: '#/definitions/models.Actor'
        type: array
      description:
        maxLength: 1000
        type: string
      genre:
        type: string
      rating:
        maximum: 10
        minimum: 0
        type: number
      release_year:
        type: integer
      title:
        maxLength: 150
        minLength: 1
        type: string
    required:
    - rating
    - title
    type: object
  models.LoginUserModel:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.Movie:
    properties:
      actors:
        items:
          $ref: '#/definitions/models.Actor'
        type: array
      description:
        maxLength: 1000
        minLength: 1
        type: string
      genre:
        type: string
      id:
        type: integer
      rating:
        maximum: 10
        minimum: 0
        type: number
      release_year:
        type: integer
      title:
        maxLength: 150
        minLength: 1
        type: string
    required:
    - genre
    - rating
    - release_year
    - title
    type: object
  models.RegisterUserModel:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.UpdateActorModel:
    properties:
      birth_date:
        type: string
      first_name:
        maxLength: 100
        type: string
      gender:
        type: string
      id:
        type: integer
      last_name:
        maxLength: 100
        type: string
      movies:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
    required:
    - birth_date
    - first_name
    - gender
    - id
    - last_name
    type: object
  models.UpdateMovieModel:
    properties:
      actors:
        items:
          $ref: '#/definitions/models.Actor'
        type: array
      description:
        maxLength: 1000
        type: string
      genre:
        type: string
      id:
        type: integer
      rating:
        maximum: 10
        minimum: 0
        type: number
      release_year:
        type: integer
      title:
        maxLength: 150
        minLength: 1
        type: string
    required:
    - id
    - rating
    - title
    type: object
info:
  contact:
    email: rtprnshukla@gmail.com
    name: Поддержка API
    url: https://github.com/shuklarituparn
  description: Документация API Filmotek
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Filmotek API
  version: "1.0"
paths:
  /api/v1/actors/all:
    get:
      operationId: read-all-actors
      parameters:
      - description: Номер страницы
        in: query
        name: page
        required: true
        type: integer
      - description: Количество элементов на странице
        in: query
        name: page_size
        required: true
        type: integer
      - description: Поле для сортировки (по умолчанию birth_date)
        in: query
        name: sort_by
        type: string
      - description: Порядок сортировки (ASC или DESC, по умолчанию DESC)
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список актеров
          schema:
            $ref: '#/definitions/controllers.ReadAllActorResponse'
        "400":
          description: Неверный размер страницы или номер страницы
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить всех актеров с пагинацией
      tags:
      - Актеры
  /api/v1/actors/create:
    post:
      consumes:
      - application/json
      operationId: create-actor
      parameters:
      - description: Объект актера, который нужно создать
        in: body
        name: actor
        required: true
        schema:
          $ref: '#/definitions/models.CreateActorModel'
      produces:
      - application/json
      responses:
        "201":
          description: Актер добавлен
          schema:
            $ref: '#/definitions/controllers.CreateActorResponse'
        "400":
          description: Неверный запрос
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Создать нового актера
      tags:
      - Актеры
  /api/v1/actors/delete:
    delete:
      operationId: delete-actor
      parameters:
      - description: Идентификатор актера
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Актер успешно удален
          schema:
            $ref: '#/definitions/controllers.DeleteActorResponse'
        "400":
          description: Требуется идентификатор актера
          schema:
            type: string
        "500":
          description: Не удалось удалить актера или его связи
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Удалить актера
      tags:
      - Актеры
  /api/v1/actors/get:
    get:
      operationId: read-actor-by-id
      parameters:
      - description: Идентификатор актера
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Подробности актера
          schema:
            $ref: '#/definitions/controllers.ReadActorResponse'
        "400":
          description: Необходим идентификатор актера
          schema:
            type: string
        "404":
          description: Актер не найден
          schema:
            type: string
        "500":
          description: Ошибка при получении актера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить актера по идентификатору
      tags:
      - Актеры
  /api/v1/actors/patch:
    patch:
      consumes:
      - application/json
      operationId: patch-actor
      parameters:
      - description: Идентификатор актера
        in: query
        name: id
        required: true
        type: string
      - description: Данные для частичного обновления актера
        in: body
        name: patchData
        required: true
        schema:
          $ref: '#/definitions/models.CreateActorModel'
      produces:
      - application/json
      responses:
        "200":
          description: Актер успешно обновлен
          schema:
            $ref: '#/definitions/controllers.PatchActorResponse'
        "400":
          description: Неверный запрос
          schema:
            type: string
        "500":
          description: Не удалось обновить актера или его связи
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Частично обновить существующего актера
      tags:
      - Актеры
  /api/v1/actors/update:
    put:
      consumes:
      - application/json
      operationId: update-actor
      parameters:
      - description: Объект актера для обновления
        in: body
        name: actor
        required: true
        schema:
          $ref: '#/definitions/models.UpdateActorModel'
      produces:
      - application/json
      responses:
        "200":
          description: Актер успешно обновлен
          schema:
            $ref: '#/definitions/controllers.UpdateActorResponse'
        "400":
          description: Неверный запрос
          schema:
            type: string
        "500":
          description: Не удалось обновить актера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Обновить существующего актера
      tags:
      - Актеры
  /api/v1/movies/all:
    get:
      operationId: read-all-movies
      parameters:
      - description: Номер страницы
        in: query
        name: page
        required: true
        type: integer
      - description: Количество элементов на странице
        in: query
        name: page_size
        required: true
        type: integer
      - description: Поле для сортировки (по умолчанию рейтинг)
        in: query
        name: sort_by
        type: string
      - description: Порядок сортировки (ASC или DESC, по умолчанию DESC)
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список фильмов
          schema:
            $ref: '#/definitions/controllers.ReadAllMoviesResponse'
        "400":
          description: Неверный размер страницы или номер страницы
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить все фильмы с пагинацией
      tags:
      - Фильмы
  /api/v1/movies/create:
    post:
      consumes:
      - application/json
      operationId: create-movie
      parameters:
      - description: Объект фильма для создания
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.CreateMovieModel'
      produces:
      - application/json
      responses:
        "201":
          description: Фильм успешно создан
          schema:
            $ref: '#/definitions/controllers.CreateMovieResponse'
        "400":
          description: Неверный запрос
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Создать новый фильм
      tags:
      - Фильмы
  /api/v1/movies/delete:
    delete:
      operationId: delete-movie
      parameters:
      - description: Идентификатор фильма
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Фильм успешно удален
          schema:
            $ref: '#/definitions/controllers.DeleteMovieResponse'
        "400":
          description: Требуется идентификатор фильма
          schema:
            type: string
        "500":
          description: Не удалось удалить фильм или его связи
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Удалить фильм
      tags:
      - Фильмы
  /api/v1/movies/get:
    get:
      operationId: read-movie-by-id
      parameters:
      - description: Идентификатор фильма
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Подробности фильма
          schema:
            $ref: '#/definitions/controllers.ReadMovieResponse'
        "400":
          description: Требуется идентификатор фильма
          schema:
            type: string
        "404":
          description: Фильм не найден
          schema:
            type: string
        "500":
          description: Ошибка при получении фильма
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить фильм по идентификатору
      tags:
      - Фильмы
  /api/v1/movies/patch:
    patch:
      consumes:
      - application/json
      operationId: patch-movie
      parameters:
      - description: Идентификатор фильма
        in: query
        name: id
        required: true
        type: string
      - description: Данные для частичного обновления фильма
        in: body
        name: patchData
        required: true
        schema:
          $ref: '#/definitions/models.CreateMovieModel'
      produces:
      - application/json
      responses:
        "200":
          description: Фильм успешно обновлен
          schema:
            $ref: '#/definitions/controllers.PatchMovieResponse'
        "400":
          description: Неверный запрос
          schema:
            type: string
        "500":
          description: Не удалось обновить фильм или его связи
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Частично обновить существующий фильм
      tags:
      - Фильмы
  /api/v1/movies/update:
    put:
      consumes:
      - application/json
      operationId: update-movie
      parameters:
      - description: Объект фильма для обновления
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.UpdateMovieModel'
      produces:
      - application/json
      responses:
        "200":
          description: Фильм успешно обновлен
          schema:
            $ref: '#/definitions/controllers.UpdateMovieResponse'
        "400":
          description: Неверный запрос
          schema:
            type: string
        "500":
          description: Не удалось обновить фильм
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Обновить существующий фильм
      tags:
      - Фильмы
  /api/v1/search:
    get:
      operationId: search-movies
      parameters:
      - description: Поисковый запрос
        in: query
        name: q
        required: true
        type: string
      - description: Поле для сортировки (по умолчанию рейтинг)
        in: query
        name: sort_by
        type: string
      - description: Порядок сортировки (ASC или DESC, по умолчанию DESC)
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список совпадающих фильмов
          schema:
            $ref: '#/definitions/controllers.SearchMovieResponse'
        "400":
          description: Неверный поисковый запрос
          schema:
            type: string
        "500":
          description: Ошибка при кодировании ответа
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Поиск фильмов
      tags:
      - Поиск Фильмов
  /api/v1/users/login:
    post:
      consumes:
      - application/json
      description: Вход пользователя с использованием электронной почты и пароля
      parameters:
      - description: Учетные данные пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserModel'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный вход в систему
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Неверная электронная почта или пароль
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Вход пользователя
      tags:
      - Аутентификация
  /api/v1/users/refresh:
    get:
      consumes:
      - application/json
      description: Обновление доступа и обновления токенов JWT
      produces:
      - application/json
      responses:
        "200":
          description: Новые токены доступа и обновления
          schema:
            $ref: '#/definitions/controllers.RefreshTokenResponse'
        "400":
          description: Неверный или истекший токен
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновление токенов JWT
      tags:
      - Аутентификация
  /api/v1/users/register:
    post:
      consumes:
      - application/json
      description: Зарегистрировать нового пользователя с помощью электронной почты
        и пароля
      parameters:
      - description: Информация о пользователе
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUserModel'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно создан
          schema:
            $ref: '#/definitions/controllers.CreateUserResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Зарегистрировать нового пользователя
      tags:
      - Аутентификация
  /healthcheck:
    get:
      operationId: health-check
      produces:
      - application/json
      responses:
        "200":
          description: Ответ на проверку состояния
          schema:
            $ref: '#/definitions/controllers.HealthCheckResponse'
      summary: Выполнить проверку состояния
      tags:
      - Healthcheck
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
