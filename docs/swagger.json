{
    "swagger": "2.0",
    "info": {
        "description": "Fimotek Api Docs",
        "title": "Filmotek API",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/shuklarituparn",
            "email": "rtprnshukla@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/v1/actors/all": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actors"
                ],
                "summary": "Get all actors with pagination",
                "operationId": "read-all-actors",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Field to sort by (default birth_date)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (ASC or DESC, default DESC)",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of actors",
                        "schema": {
                            "$ref": "#/definitions/controllers.ReadAllActorResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid page_size or page",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/actors/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actors"
                ],
                "summary": "Create a new actor",
                "operationId": "create-actor",
                "parameters": [
                    {
                        "description": "Actor object to be created",
                        "name": "actor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateActorModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Actor Added",
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateActorResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/actors/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actors"
                ],
                "summary": "Delete an actor",
                "operationId": "delete-actor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Actor ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Actor deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.DeleteActorResponse"
                        }
                    },
                    "400": {
                        "description": "Actor ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete actor or its associations",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/actors/get": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actors"
                ],
                "summary": "Get actor by ID",
                "operationId": "read-actor-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Actor ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Actor details",
                        "schema": {
                            "$ref": "#/definitions/controllers.ReadActorResponse"
                        }
                    },
                    "400": {
                        "description": "Actor ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Actor not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch actor",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/actors/patch": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actors"
                ],
                "summary": "Update an existing actor partially",
                "operationId": "patch-actor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Actor ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Patch data for updating the actor",
                        "name": "patchData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateActorModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Actor updated successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.PatchActorResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update actor or its associations",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/actors/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actors"
                ],
                "summary": "Update an existing actor",
                "operationId": "update-actor",
                "parameters": [
                    {
                        "description": "Actor object to be updated",
                        "name": "actor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateActorModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Actor Updated successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateActorResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update actor",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/movies/all": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Get all movies with pagination",
                "operationId": "read-all-movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Field to sort by (default rating)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (ASC or DESC, default DESC)",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of movies",
                        "schema": {
                            "$ref": "#/definitions/controllers.ReadAllMoviesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid page_size or page",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/movies/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Create a new movie",
                "operationId": "create-movie",
                "parameters": [
                    {
                        "description": "Movie object to be created",
                        "name": "movie",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateMovieModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Movie created successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateMovieResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/movies/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Delete a movie",
                "operationId": "delete-movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.DeleteMovieResponse"
                        }
                    },
                    "400": {
                        "description": "Movie ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete movie or its associations",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/movies/get": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Get movie by ID",
                "operationId": "read-movie-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie details",
                        "schema": {
                            "$ref": "#/definitions/controllers.ReadMovieResponse"
                        }
                    },
                    "400": {
                        "description": "Movie ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Movie not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch movie",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/movies/patch": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Update an existing movie partially",
                "operationId": "patch-movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Patch data for updating the movie",
                        "name": "patchData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateMovieModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie updated successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.PatchMovieResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update movie or its associations",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/movies/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Update an existing movie",
                "operationId": "update-movie",
                "parameters": [
                    {
                        "description": "Movie object to be updated",
                        "name": "movie",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateMovieModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie updated successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateMovieResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update movie",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search Movies"
                ],
                "summary": "Search for movies",
                "operationId": "search-movies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Field to sort by (default rating)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (ASC or DESC, default DESC)",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matching movies",
                        "schema": {
                            "$ref": "#/definitions/controllers.SearchMovieResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid search query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error encoding response",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/users/login": {
            "post": {
                "description": "Log in a user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginUserModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logged In Successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/refresh": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Refresh JWT access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh JWT tokens",
                "responses": {
                    "200": {
                        "description": "New access and refresh tokens",
                        "schema": {
                            "$ref": "#/definitions/controllers.RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/register": {
            "post": {
                "description": "Register a new user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterUserModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User Created Successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Perform health check",
                "operationId": "health-check",
                "responses": {
                    "200": {
                        "description": "Health check response",
                        "schema": {
                            "$ref": "#/definitions/controllers.HealthCheckResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.CreateActorResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.CreateMovieResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Movie"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.CreateUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "controllers.DeleteActorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.DeleteMovieResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "controllers.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "current_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "controllers.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "controllers.PatchActorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.PatchMovieResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.ReadActorResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Actor"
                }
            }
        },
        "controllers.ReadAllActorResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Actor"
                    }
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "controllers.ReadAllMoviesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Movie"
                    }
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "controllers.ReadMovieResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Movie"
                }
            }
        },
        "controllers.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "refresh": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "controllers.SearchMovieResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Movie"
                    }
                }
            }
        },
        "controllers.UpdateActorResponse": {
            "type": "object",
            "properties": {
                "actor": {
                    "$ref": "#/definitions/models.Actor"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.UpdateMovieResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Movie"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Actor": {
            "type": "object",
            "required": [
                "birth_date",
                "first_name",
                "gender",
                "last_name"
            ],
            "properties": {
                "birth_date": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "movies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Movie"
                    }
                }
            }
        },
        "models.CreateActorModel": {
            "type": "object",
            "required": [
                "birth_date",
                "first_name",
                "gender",
                "last_name"
            ],
            "properties": {
                "birth_date": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "movies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Movie"
                    }
                }
            }
        },
        "models.CreateMovieModel": {
            "type": "object",
            "required": [
                "rating",
                "title"
            ],
            "properties": {
                "actors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Actor"
                    }
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "genre": {
                    "type": "string"
                },
                "rating": {
                    "type": "number",
                    "maximum": 10,
                    "minimum": 0
                },
                "release_year": {
                    "type": "integer"
                },
                "title": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 1
                }
            }
        },
        "models.LoginUserModel": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "models.Movie": {
            "type": "object",
            "required": [
                "genre",
                "rating",
                "release_year",
                "title"
            ],
            "properties": {
                "actors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Actor"
                    }
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "minLength": 1
                },
                "genre": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "number",
                    "maximum": 10,
                    "minimum": 0
                },
                "release_year": {
                    "type": "integer"
                },
                "title": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 1
                }
            }
        },
        "models.RegisterUserModel": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "models.UpdateActorModel": {
            "type": "object",
            "required": [
                "birth_date",
                "first_name",
                "gender",
                "id",
                "last_name"
            ],
            "properties": {
                "birth_date": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "movies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Movie"
                    }
                }
            }
        },
        "models.UpdateMovieModel": {
            "type": "object",
            "required": [
                "id",
                "rating",
                "title"
            ],
            "properties": {
                "actors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Actor"
                    }
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "genre": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "number",
                    "maximum": 10,
                    "minimum": 0
                },
                "release_year": {
                    "type": "integer"
                },
                "title": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 1
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}